// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: microservice.proto

package pkg

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SignUpRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignUpRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignUpRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignUpRequestMultiError, or
// nil if none found.
func (m *SignUpRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignUpRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Gender

	// no validation rules for Country

	// no validation rules for Age

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return SignUpRequestMultiError(errors)
	}

	return nil
}

// SignUpRequestMultiError is an error wrapping multiple validation errors
// returned by SignUpRequest.ValidateAll() if the designated constraints
// aren't met.
type SignUpRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignUpRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignUpRequestMultiError) AllErrors() []error { return m }

// SignUpRequestValidationError is the validation error returned by
// SignUpRequest.Validate if the designated constraints aren't met.
type SignUpRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignUpRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignUpRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignUpRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignUpRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignUpRequestValidationError) ErrorName() string { return "SignUpRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignUpRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignUpRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignUpRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignUpRequestValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInRequestMultiError, or
// nil if none found.
func (m *SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Password

	if len(errors) > 0 {
		return SignInRequestMultiError(errors)
	}

	return nil
}

// SignInRequestMultiError is an error wrapping multiple validation errors
// returned by SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequestMultiError) AllErrors() []error { return m }

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on AddAssetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddAssetRequestMultiError, or nil if none found.
func (m *AddAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedBy

	// no validation rules for Type

	// no validation rules for Description

	// no validation rules for Data

	if len(errors) > 0 {
		return AddAssetRequestMultiError(errors)
	}

	return nil
}

// AddAssetRequestMultiError is an error wrapping multiple validation errors
// returned by AddAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type AddAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddAssetRequestMultiError) AllErrors() []error { return m }

// AddAssetRequestValidationError is the validation error returned by
// AddAssetRequest.Validate if the designated constraints aren't met.
type AddAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAssetRequestValidationError) ErrorName() string { return "AddAssetRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAssetRequestValidationError{}

// Validate checks the field values on GetAssetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAssetRequestMultiError, or nil if none found.
func (m *GetAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return GetAssetRequestMultiError(errors)
	}

	return nil
}

// GetAssetRequestMultiError is an error wrapping multiple validation errors
// returned by GetAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type GetAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAssetRequestMultiError) AllErrors() []error { return m }

// GetAssetRequestValidationError is the validation error returned by
// GetAssetRequest.Validate if the designated constraints aren't met.
type GetAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAssetRequestValidationError) ErrorName() string { return "GetAssetRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAssetRequestValidationError{}

// Validate checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteAssetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteAssetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteAssetRequestMultiError, or nil if none found.
func (m *DeleteAssetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteAssetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteAssetRequestMultiError(errors)
	}

	return nil
}

// DeleteAssetRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteAssetRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteAssetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteAssetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteAssetRequestMultiError) AllErrors() []error { return m }

// DeleteAssetRequestValidationError is the validation error returned by
// DeleteAssetRequest.Validate if the designated constraints aren't met.
type DeleteAssetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteAssetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteAssetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteAssetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteAssetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteAssetRequestValidationError) ErrorName() string {
	return "DeleteAssetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteAssetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteAssetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteAssetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteAssetRequestValidationError{}

// Validate checks the field values on PaginationParams with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginationParams) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginationParams with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginationParamsMultiError, or nil if none found.
func (m *PaginationParams) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginationParams) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	if len(errors) > 0 {
		return PaginationParamsMultiError(errors)
	}

	return nil
}

// PaginationParamsMultiError is an error wrapping multiple validation errors
// returned by PaginationParams.ValidateAll() if the designated constraints
// aren't met.
type PaginationParamsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginationParamsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginationParamsMultiError) AllErrors() []error { return m }

// PaginationParamsValidationError is the validation error returned by
// PaginationParams.Validate if the designated constraints aren't met.
type PaginationParamsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginationParamsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginationParamsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginationParamsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginationParamsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginationParamsValidationError) ErrorName() string { return "PaginationParamsValidationError" }

// Error satisfies the builtin error interface
func (e PaginationParamsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginationParams.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginationParamsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginationParamsValidationError{}

// Validate checks the field values on AddFavoriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddFavoriteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddFavoriteRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddFavoriteRequestMultiError, or nil if none found.
func (m *AddFavoriteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddFavoriteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AssetId

	if len(errors) > 0 {
		return AddFavoriteRequestMultiError(errors)
	}

	return nil
}

// AddFavoriteRequestMultiError is an error wrapping multiple validation errors
// returned by AddFavoriteRequest.ValidateAll() if the designated constraints
// aren't met.
type AddFavoriteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddFavoriteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddFavoriteRequestMultiError) AllErrors() []error { return m }

// AddFavoriteRequestValidationError is the validation error returned by
// AddFavoriteRequest.Validate if the designated constraints aren't met.
type AddFavoriteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddFavoriteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddFavoriteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddFavoriteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddFavoriteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddFavoriteRequestValidationError) ErrorName() string {
	return "AddFavoriteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddFavoriteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddFavoriteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddFavoriteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddFavoriteRequestValidationError{}

// Validate checks the field values on GetFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetFavoritesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFavoritesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFavoritesRequestMultiError, or nil if none found.
func (m *GetFavoritesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFavoritesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFavoritesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFavoritesRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFavoritesRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFavoritesRequestMultiError(errors)
	}

	return nil
}

// GetFavoritesRequestMultiError is an error wrapping multiple validation
// errors returned by GetFavoritesRequest.ValidateAll() if the designated
// constraints aren't met.
type GetFavoritesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFavoritesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFavoritesRequestMultiError) AllErrors() []error { return m }

// GetFavoritesRequestValidationError is the validation error returned by
// GetFavoritesRequest.Validate if the designated constraints aren't met.
type GetFavoritesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFavoritesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFavoritesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFavoritesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFavoritesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFavoritesRequestValidationError) ErrorName() string {
	return "GetFavoritesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFavoritesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFavoritesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFavoritesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFavoritesRequestValidationError{}

// Validate checks the field values on NetWorkResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NetWorkResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NetWorkResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NetWorkResponseMultiError, or nil if none found.
func (m *NetWorkResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *NetWorkResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	// no validation rules for Success

	if m.Data != nil {

		if all {
			switch v := interface{}(m.GetData()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NetWorkResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NetWorkResponseValidationError{
						field:  "Data",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NetWorkResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NetWorkResponseMultiError(errors)
	}

	return nil
}

// NetWorkResponseMultiError is an error wrapping multiple validation errors
// returned by NetWorkResponse.ValidateAll() if the designated constraints
// aren't met.
type NetWorkResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NetWorkResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NetWorkResponseMultiError) AllErrors() []error { return m }

// NetWorkResponseValidationError is the validation error returned by
// NetWorkResponse.Validate if the designated constraints aren't met.
type NetWorkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NetWorkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NetWorkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NetWorkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NetWorkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NetWorkResponseValidationError) ErrorName() string { return "NetWorkResponseValidationError" }

// Error satisfies the builtin error interface
func (e NetWorkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNetWorkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NetWorkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NetWorkResponseValidationError{}
